<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
  <META name="generator" content= "HTML Tidy for Windows (vers 1st September 2004), see www.w3.org">
  <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <META name="Generator" content="Handwritten HTML code">
  <META name="Template" content="WoBu's wonderful HTML templates">
  <TITLE> File format of WinPic's PIC device list </TITLE>
<link href="WxPic.css" rel="stylesheet" type="text/css" />
<link href="WxPic.ico" rel="shortcut icon"/>
</HEAD>
<BODY link="#0000FF" vlink="#800080">
<div class="left-col">
  <a href="http://wxpic.free.fr/"><img id="Logo" src="LargeLogo.png" width="160" height="96" /></a>
</div>
<div class="content">
<a name="Top" id="Top"></a>
<h1>
  <A name="top" id="top">File format of WinPic's PIC device
  list</A>
</h1>
<h2>
  <A name="devices_ini" id="devices_ini">The file DEVICES.INI</A></h2>
<P>
This file can be modified to make WinPic support a new PIC device. To add
support for a new device which is not directly supported by WinPic,
<UL>
  <LI>
    Create a backup copy of the file DEVICES.INI
  <LI>
    Load the DEVICES.INI file with a text editor like Notepad.
  <LI>
    Add a new section for your the new device, like [PIC16F9999]. The easiest
    way to achieve this is block-copy another section for a similar device, rename
    the section header and modify all parameters which are different in the new
    device.
  <LI>
    Save the modified DEVICES.INI file
  <LI>
    Restart WinPic
</UL>
<P>
The new device should appear in the
device list now. If not, there
may be something wrong in the file - usually a missing entry in the [Devices]
section, so WinPic does not know that there is a new section in the file.
(Reason: Its too complicated to check which "sections" are present in an
INI-file. WinPic checks all "devX=NAME" entries in the section [Devices]
to find out which devices are defined in the file). Device definitions in
DEVICES.INI always override the definitions in the hard-coded "built-in"
list (this method has been chosen to fix bugs easily without having to recompile
WinPic).
<P>
The parameter names in DEVICES.INI should speak for themselves. Parameters
beginning with <span class="quote">Cfgmask_</span> are bitmasks for the configuration word. If the
according function does not exist in a particular device, the value should
be zero.
<P>
Hexadecimal numbers must have the suffix "0x" to tell them from decimal numbers.
<P>
WinPic can produce a dumpfile with the definitions of all built-in PIC device
definitions (in the old versions of WinPic, the device definitions were all
"built-in" so I had to modify the C sourcecode and recompile WinPic whenever
a new PIC appeared. Hopefully this is over now... but if there is a new
programming algorithm for a new PIC device, you still have to wait for a
new release of WxPic). To produce a dumpfile with the built-in device
definitions, select <span class="quote">Tools</span> / <span class="quote">Specials</span> / <span class="quote">Dump built-in device list to file</span>
from WxPic's main menu.
<h3><a class="return" href="#Top">Haut</a>Progam Algorithm</h3>
<p>The programming algorithm used for a particular device is stated in DEVICES.INI
  like this (for example in the 16F628):</p>
    <p class="quote">
    EraseAlgo=16Fxx<BR>
    CodeProgAlgo=16Fxx<BR>
    ConfigProgAlgo=CONFIG_MEM_16xxx<BR>
    DataProgAlgo=DATA_EEPROM_16xxx</p>
    <p>
    (other parameters in DEVICES.INI are explained in the next
  chapter)</p>

<p>As you see, different algorithms can be used to erase / program CODE / program
CONFIG MEMORY / program DATA MEMORY . &nbsp;A lot of examples can be found
in the file dumpfile of the built-in device definitions.</p>
<p>Due to Microchip diligently writing new "Flash Memory Programming Specifications"
for every new family of chips they made, the following 'algorithm names'
existed by the time of this writing. (In the meantime, there will be many
more - just look into the file DEVICES.INI) :</p>
<dl>
  <dt>
    16Fxx</dt>
    <dd>for 16F84, 16F628, and many similar devices. </dd>
    <dt>16Fxx_OLD_ERASE</dt>
    <dd>The 16Fxx algorithm has been fixed in V1.2. In case it would bring a major regression, this algoritm is the old (pre-V1.2) 16Fxx algorithm</dd>
    <dt></dt>
    <dt>12Fxx</dt>
  	<dd>for 12F629 and 12F675 (note that <span class="quote">12Fxx</span> and <span class="quote">16Fxx</span> are identical and use the <span class="quote">CanRead</span> indicator to adapt to different PIC capabilities)</dd>
  <dt>
    16F7x7</dt>
    <dd>
    for 16F737 and others. Programs <strong>two</strong> memory locations
    at a time. New since August 2004 !</dd>
  <dt>16F81x</dt>
  <dd>
    for 16F818 and others. Programs <strong>four</strong> memory locations
    at a time. In the 16F818 used for code programming, not sure if this applies
    to&nbsp;the data EEPROM as well (old programming spec was unclear).</dd>
  <dt>16F87x</dt>
    <dd>for 16F870 and other NON-"A" types. Programs
      <strong>one</strong> memory location at a time. The "erase-all" algorithm
    also differs from other devices !&nbsp;</dd>
  <dt>16F87xA</dt>
    <dd>for 16F877A and other -A types. Programs
      <strong>eight</strong> memory locations at a time.&nbsp;<br/>
    Caution: The programming algorithm for the -A devices is totally different
    from their older "non -A" devices !</dd>
  <dt>PIC18F</dt>
  <dd>
    for all members of the PIC18Fxxx(x) family. For these devices, the size of
    the so-called "write buffer" should be specified too, like this:<BR>
    <span class="quote">CodeMemWriteLatchSize=64
    ; Write-Buffer-Size in bytes.</span></dd>
  <dt>CONFIG_MEM_16xxx</dt>
  <dd>configuration memory programming algorithms for 16F84, 16F628 and others
    "early devices with FLASH memory"</dd>
  <dt>DATA_EEPROM_16xxx</dt>
  <dd>
    data EEPROM programming algorithm for many (but not all) PICs with on-chip
    data EEPROM memory.</dd>
  <dt>MULTI_WORD (added in V1.2)</dt>
  <dd>This algorithm programs a row at once. The number of words in the row has to be defined in the <span class="quote">CodeMemWriteLatchSize</span> parameter. If this algo is used for data the size of the row must be defined in parameter <span class="quote">CodeMemEraseLatchSize</span>.</dd>
</dl>
  <dt><a class="return" href="#Top">Haut</a></dt>
<h3>Erase Algorithm</h3>
<p>Special ERASE algorithms (in DEVICES.INI) :</p>
<dl>
  <dt>
    ERASE_16F62xA<BR/>
    ERASE_16F81x<BR/>
    ERASE_16F87xA<BR/>
    ERASE_16F87x<BR/>
    ERASE_12F6xx<BR/>
    PIC18F (usable as parameter for ERASE_ALGO)<br/>
    <A NAME="PIC18F_erase_trouble" id="PIC18F_erase_trouble"/>PIC18F_OLD (added
    to avoid trouble with "old" and "new" programming specifications)</dt>
    <dd>
    One fine day, Microchip changed the 'chip erase pattern' in their "Flash
    Memory Programming Specification" for some PIC18Fxxxx from 0x0F0F 0x8787
    to 0x3F3F 0x8F8F (the latter was found in document DS39622J on page 14).
    Some newer chips refused to erase with the older algorithm. The question
    is now, will OLDER chips which *did* work with the original code (based on
    Microchip's document DS39622B) still work with the NEWER algorithm ? For
    this reason, the "EraseAlgo" value in WinPic's DEVICES.INI can now be set
    to either <CODE><B>PIC18F</B></CODE> or <CODE><B>PIC18F_OLD.</B></CODE> For
    example, a PIC18F2550 could successfully be erased with both command patterns
    (the one from DS39622B *and* from DS39622J), while a PIC18F8490 could only
    be erased with the pattern specified in DS39622J.</dd>
</dl>
<P>Device definitions in DEVICES.INI will override the built-in definition table.
So, if you find there is a bug in a device definition, add it into DEVICES.INI
to let WinPic ignore its internal PIC device table. A message will be displayed
in the status line and in WinPic's "Message" list.
  <dt><a class="return" href="#Top">Haut</a></dt>
  <h2>
  Parameters in DEVICES.INI</h2>
<P>
For every PIC device in the definition file, a lot of different parameters
can be defined. Usually most of these parameters have the same values as
for other PICs of the same family, but some won't. When adding support for
a new device, try to find a similar device, copy &amp; paste the definitions
to a new segment in the INI file. So you only have to edit a few values -
but be careful to find the differences !
<P>
The following parameter values (after the '=' character) are taken as an
example from the PIC12F675.
<DL>
  <DT>
    <U>DeviceName=PIC12F675</U>
  <DD>
    This string will be displayed in WinPic's device list
  <DT>
    <U>CodeMemType=1</U>
  <DD>
    Defines the type of the code (alias "program") memory. '1' means FLASH memory.
  <DT>
    <U>CodeMemSize=1024</U>
  <DD>
    Size of the code memory in WORDS. Remember that a PIC-"word" is usually not
    16, but 14 bits wide.
  <DT>
    <U>DataEEPROMSize=128</U>
  <DD>
    Size of the (data-)EEPROM memory in BYTES.
  <DT>
    <U>InternalRAMSize=64</U>
  <DD>
    Size of the internal RAM. Displayed on WinPic's device tab for the user's
    information, but not really important for programming.
  <DT>
    <U>AddrConfigMem=0x2000</U>
  <DD>
    Address of the first location in the PIC's "config" memory. I never found
    anything different from 0x2000 but who knows...
  <DT>
    <U>AddrConfigWord=0x2007</U>
  <DD>
    Address of the PIC's (first!) "configuration word". This usually contains
    the oscillator configuration, etc etc. The meaning of the bits in the config
    word is defined in various Cfgmask_xxxx parameters.
  <DT>
    <U>AddrDataMem=0x2100</U>
  <DD>
    Start address of the EEPROM data. This is not a real address inside the PIC,
    but a convention how EEPROM data are embedded in a HEX file, so it's very
    unlikely to change in future devices (but who knows..)
  <DT>
    <U>AddrOscCalib=0x03FF</U>
  <DD>
    Address of the oscillator calibration word. Only exists for a few new devices.
    A value of 0xFFFFFFFF (i.e. "-1") means "there is no osc calib word in <EM>code
    memory</EM> for this device".
  <DT>
    <A name="config_mem_used_locs" id= "config_mem_used_locs"><U>ConfigMemUsedLocs0</U>0_1<U>F=0x00CF</U></A>
  <DD>
    New since 2004-08. Defines which of the configuration memory locations do
    really exist for this device. For each of the first 32 locations in config
    memory (addresses 0x2000..0x201F), there is a bit in this parameter (bit
    0 for address 0x2000, bit 1 for address 0x2001, etc). A ZERO-bit means "this
    location does not exist. The definition
    <CODE>ConfigMemUsedLocs00_1F=0x00CF</CODE> means, only the addresses
    0x2000...0x2003 (=ID locations), 0x2006 (processor ID), and 0x2007 (configuration
    word) exist, all other locations are "unused" or "reserved" (Microchip slang).
    Some new devices like the 16F737 have more cells in the configuration memory,
    for example a second configuration word, or a "calibration word", etc.
  <DT>
    <U>ConfigMemUsedLocs2</U>0_3<U>F=0x0000</U>
  <DD>
    New since 2004-08. Defines which of the 'upper' configuration memory locations
    (address range 0x2020..0x203F) do really exist. In August 2004, no such device
    was known to the author but you never know - the programming specs always
    mention the configuration memory area 0x2000...0x203F so there <EM>may</EM>
    be something here in future.
  <DT>
    <U>DeviceIdAddr=0x2006</U>
  <DD>
    Address of the device ID location. Note that some early PIC micros did not
    have ID locations !
  <DT>
    <U>DeviceIdMask=0x3FE0</U>
  <DD>
    A mask for the processor ID inside the device ID location. Zero-bits are
    masked out, when comparing the value read from the PIC with the value from
    the 'DeviceIdValue' parameter. Why this ? Some PICs have coded the revision
    step number in some of the device ID bits, which must be stripped when detecting
    the chip type.
  <DT>
    <U><A NAME="device_id_value">DeviceIdValue=0x0FC0</A></U>
  <DD>
    Indicates the processor type. Note that some early chips like the once-popular
    PIC16F84 did not identify themselves through the device ID ! This value is
    read from the PIC; and WinPic searches for this value in the device database.
  <DT>
    <U>CanRead=0</U>
  <DD>
    A 'flag' for the programming algorithm. "CanRead=0" means the PIC cannot
    be read <EM>while</EM> programming, so it must be verified after programming.
    Taking a look into the PIC's programming specification to find the right
    value. For newer PICs with "more than one WORD per programming cycle" it
    seems to be impossible to verify while programming, so CanRead must be zero.
  <DT>
    <U>EraseAlgo=12Fxx</U>
  <DD>
    Defines which algorithm must be use to erase the code memory in this chip.
    Some algorithm symbols are listed in the previous chapter.
  <DT>
    <U>CodeProgAlgo=12Fxx</U>
  <DD>
    Defines which algorithm must be used to write the code ("program") memory
    in this device. Note that Microchip seem to be very busy as far as implementing
    new, incompatible programming algorithms for new devices - which can be a
    real pain for authors of PIC programming software !
  <DT>
    <U>CodeMemWriteLatchSize=64</U>
  <DD>
    Defines the size of the "write-buffer" for PIC18Fxxxx. For most(?) 16F's,
    this parameter is not required (question mark because this *may* change in
    future). Consult the "Flash memory programming specification" of the device
    which you want to support to find this value.
  <DT>
    <U>ConfigProgAlgo=CONFIG_MEM_16xxx</U>
  <DD>
    Defines which algorithm must be used to write the configuration memory in
    this device. Note that the config memory programming algorithm is very different
    from the code memory programming algorithm, especially for newer chips. The
    conig mem prog algo seems to be changed less frequently by Microchip than
    the code mem algorithm.
  <DT>
    <U>DataProgAlgo=DATA_EEPROM_16xxx</U>
  <DD>
    Specifies the DATA EEPROM programming algorithm. Fortunately this changes
    less frequently than the code memory programming algorithm. Up to now, there
    is only one DATA EEPROM prog'ing algorithm (DATA_EEPROM_16xxx) which even
    works for the 12Fxxx family.
  <DT>
    <U>Ti_Clock_us=5</U>
  <DD>
    The mininum time for a serial clock pulse. Usually 5 microseconds. Due to
    the complexity of direct port access under windows, WinPic can hardly realize
    this with the "extra simple" programmers. But specifying the correct value
    from the PIC's datasheet here doen't hurt !
  <DT>
    <U>Ti_Prog_us=10000</U>
  <DD>
    The required duration of a "programming cycle", specified in microseconds.
    If you don't know this exactly, enter 10000 here. A higher value than stated
    in the PIC programming specification does not hurt for FLASH-based PIC's.
  <DT>
    <U>Ti_Erase_us=10000</U>
  <DD>
    The required delay time for the "Erase" command (in microseconds). Usually
    somewhere around 10 milliseconds.<BR>
  <DT>
    <U>CmdLoadConfig=0</U>
  <DD>
    The serial command for "Load Config". It is quite unlikely that the bit pattern
    for this command will ever change, but ... (you guessed it: "who knows").
  <DT>
    <U>CmdLoadProg=2</U>
  <DD>
    Serial command for "Load Program". Look into the PIC's programming specification.
    Quite unlikely to change.
  <DT>
    <U>CmdReadProg=4</U>
  <DD>
    Serial command for "Read Program". See comments above.
  <DT>
    <U>CmdIncrAddr=6</U>
  <DD>
    Serial command for "Increment address".
  <DT>
    <U>CmdBeginProg=8</U>
  <DD>
    Serial command for "Begin Programming". Beware, there are different flavours
    of this command. Look into the programming spec !
  <DT>
    <U>CmdEndProg=14</U>
  <DD>
    Serial command for "End Programming".
  <DT>
    <U>CmdLoadData=3</U>
  <DD>
    Serial command for "Load data for EEPROM memory".
  <DT>
    <U>CmdReadData=5</U>
  <DD>
    Serial command for "Read data from EEPROM memory"
  <DT>
    <U>CmdEraseProg=9</U>
  <DD>
    Serial command for "Erase" or "Begin Erase Cycle". Some programming algorithms
    ignore this parameter because they use totally different erase method, which
    must consider the state of the protection bits, etc etc.
  <DT>
    <U>CmdEraseData=11</U>
  <DD>
    Serial command for "Erase Data EEPROM".
  <DT>
    <U>CmdEraseChip=-1</U>
  <DD>
    Serial command for "Erase Chip" (which, for some devices, only works if the
    chip is PROTECTED !!!). A value of "-1" means "there is no chip erase command
    for this PIC".
  <DT>
    <U>CmdBeginProgNoErase=-1</U>
  <DD>
    Serial command for "Begin Programming without erase". Don't ask me why they
    introduced this. Only used by a few code memory programming algorithms.<BR>
  <DT>
    <U>Cfgmask_unused=0x0E00</U>
  <DD>
    A bitcombination for the configuration word which contains all "unused" bits
    (bits which do not have a function, and must not be considered when verifying
    the PIC).
  <DT>
    <U>Cfgmask_unknown=0x0000</U>
  <DD>
    A bitcombination for the configuration word which contains all bits which
    are not covered by any of the following masks, but must be programmable,
    and must be considered during verify. Reason for this mask: It happened too
    often that Microchip came up with new devices which had "completely new"
    functions in the configuration word (see the long list below). If this happens
    again in future, you still have the chance to edit those bits in the config
    word in hexadecimal form on WinPic "device/config" tab.
  <DT>
    <U>Cfgmask_cpbits=0x0080</U>
  <DD>
    Bitmask for the code protection bits. There may be more than one CP bit,
    sometimes for different areas in the code memory, but since WinPic was never
    intended for mass production I do not want to support all these different
    kinds of code protection. When setting the "code protection" checkmark on
    the device/config tab, all these CP bits are activated, if code protection
    is turned off, all CP bits are set to one because they seem to be "low-active",
    at least for all devices I know. It Microchip decides to change this one
    bad day, like they&nbsp;did with the "PWRTE" bit. In that case you may find
    an "inversion mask for the code protection bits" in a future release of WinPic...
    or you will find the note "sorry I don't support that nonsense").
  <DT>
    <U>Cfgmask_cpd=0x0100</U>
  <DD>
    Bitmask for the data protection bit (as far as I know there is only one such
    bit, if any, but there may be more.... who knows ;-)
  <DT>
    <U>Cfgmask_pwrte=0x0010</U>
  <DD>
    Bitmask for the PWRTE bit (power-on-timer-enable). This bit has different
    names, depending into which datasheet you look...
  <DT>
    <U>Cfgmask_inv_pwrte=0x0010</U>
  <DD>
    Bitmask to INVERT the "pwrte" bit. I can only guess why Microchip did change
    the polarity of this bit... now its up to you to look into the PIC's datasheet
    to find out if this bit is inverted or not. As far as I remember, they changed
    the polarity when replacing the good old 16C84 with the 16F84 but I am not
    really sure. If the PWRTE bit is inverted ("low-active"), this parameter
    must have the same value as <CODE>Cfgmask_pwrte</CODE>.
  <DT>
    <U>Cfgmask_wdte=0x0008</U>
  <DD>
    Bitmask for the watchdog timer enable bit in the configuration word.
  <DT>
    <U>Cfgmask_oscillator=0x0007</U>
  <DD>
    Bitmask for the ocillator selection. The possible values of these bits are
    defined by the following parameters. Some PICs have four, some have eight
    possible combinations:<BR>
    Cfgmask_osc_rc=0x0007<BR>
    Cfgmask_osc_hs=0x0002<BR>
    Cfgmask_osc_xt=0x0001<BR>
    Cfgmask_osc_lp=0x0000<BR>
    Cfgmask_osc_extclk=0x0003<BR>
    Cfgmask_osc_intrc_noclkout=0x0004<BR>
    Cfgmask_osc_intrc_clkout=0x0005<BR>
    Cfgmask_osc_extrc_noclkout=0x0006
  <DT>
    <U>Cfgmask_lvp=0x0000</U>
  <DD>
    Configuration bit for "low voltage programming". A value of 0x0000 means
    that there is no low-voltage programming option for this device.
  <DT>
    <U>Cfgmask_boden=0x0040</U>
  <DD>
    Bitmask for "brown-out detection".
  <DT>
    <U>Cfgmask_mclre=0x0020</U>
  <DD>
    Bitmask for "MCLR enable". Some (newer) PICs allow using the MCLR pin ("reset
    input") to be used as "I/O" pin (often only an input pin, see datasheet).
  <DT>
    <U>Cfgmask_ddebug=0x0000</U>
  <DD>
    Bitmask for the "debug" function in some devices. See datasheet. Never used,
    never tested.
  <DT>
    <U>Cfgmask_wrcode=0x0000</U>
  <DD>
    Bitmask to enable the "write to code memory" function. Yes, some PICs allow
    programming the code memory during run-time which can be used to write a
    custom "bootloader" through a standard serial interface. Hardly used as far
    as I know, at least for PICs.
  <DT>
    <U>Cfgmask_bandgap=0x3000</U>
  <DD>
    Bitmask for the bandgap calibration bits. A value of 0x0000 means "there
    are no bandgap calibration bits in this device".
  <DT>
    <U>Cfgmask2_used_bits=0x0000</U>
  <DD>
    If there is a second configuration word in the PIC, all existing bits must
    be set in this value. If a second word exists at all, only a few bits really
    exist in it. Because this is so rarely used there is no "decoder" for the
    second config word in WinPic. You can only enter the bits for the 2nd config
    word in hexadecimal form. WinPic only needs this bitmask to verify the 2nd
    config word properly because unimplemented bits may read "zero" or "one"
    - so they must not be ignored during verify.&nbsp;<span class="quote">Cfgmask2_used_bits=0x0000</span>    means "there is no second config word".<BR>
    Please note: If there is a second configuration word, bit 8 in the parameter
    <CODE><A href= "#config_mem_used_locs">ConfigMemUsedLocs00_1F</A></CODE>&nbsp;should
    be set - otherwise WinPic may consider this location as "unused".
</DL>
  <dt><a class="return" href="#Top">Haut</a></dt>
<p>Author: Wolfgang Buescher (DL4YHF)<br>
  Modified by: Philippe Chevrier</p>
</div>
</BODY></HTML>
